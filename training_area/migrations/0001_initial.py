# Generated by Django 2.1.7 on 2019-03-11 12:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_athlete', models.BooleanField(default=False)),
                ('is_coach', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ExertionPerceived',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scale_type', models.CharField(choices=[('RTS', 'RTS'), ('TSA', 'TSA')], default='RTS', max_length=10, verbose_name='Chart Type')),
                ('rep_scale', models.SmallIntegerField(blank=True, null=True)),
                ('exertion_scale', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('percent', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='Macrocycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('macrocycle_name', models.CharField(max_length=255, verbose_name='Macrocycle Name')),
                ('descripton', models.TextField(max_length=500, null=True)),
                ('completed', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Mesocycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mesocycle_name', models.CharField(max_length=255, verbose_name='Mesocycle Name')),
                ('descripton', models.TextField(max_length=500, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('macrocycle', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mac_cycle', to='training_area.Macrocycle')),
            ],
        ),
        migrations.CreateModel(
            name='Microcycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('microcycle_name', models.CharField(max_length=255, verbose_name='Microcycle Name')),
                ('completed', models.BooleanField(default=False)),
                ('mesocycle', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='meso', to='training_area.Mesocycle')),
            ],
        ),
        migrations.CreateModel(
            name='Movement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_name', models.CharField(max_length=255, verbose_name='Movement Name')),
                ('num_reps', models.SmallIntegerField(verbose_name='Repetitions')),
                ('num_reps_done', models.SmallIntegerField(null=True, verbose_name='Repetitions Completed')),
                ('kg_done', models.DecimalField(decimal_places=2, max_digits=6, null=True, verbose_name='Load Completed')),
                ('rpe', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)], verbose_name='RPE')),
                ('kg', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Load')),
                ('is_backoff', models.BooleanField(default=False, verbose_name='Backoff set?')),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='RepMax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rep_max_name', models.CharField(max_length=255, verbose_name='RM Name')),
                ('rep_max', models.SmallIntegerField(null=True, verbose_name='1-RM')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Workout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workout_name', models.CharField(max_length=255, verbose_name='Workout Name')),
                ('alert', models.BooleanField(default=False, null=True)),
                ('feedback', models.TextField(blank=True, max_length=500)),
                ('completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('microcycle', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='micro', to='training_area.Microcycle')),
            ],
        ),
        migrations.CreateModel(
            name='Athlete',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.TextField(max_length=50, verbose_name='First Name')),
                ('last_name', models.TextField(max_length=50, verbose_name='Last Name')),
            ],
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(max_length=255, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Last Name')),
                ('bio', models.TextField(blank=True, max_length=500)),
            ],
        ),
        migrations.AddField(
            model_name='movement',
            name='workout',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='work', to='training_area.Workout'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='workout',
            name='athlete',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='workout_athlete', to='training_area.Athlete'),
        ),
        migrations.AddField(
            model_name='workout',
            name='coach',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='workout_coach', to='training_area.Coach'),
        ),
        migrations.AddField(
            model_name='team',
            name='coach',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_coach', to='training_area.Coach'),
        ),
        migrations.AddField(
            model_name='repmax',
            name='athlete',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='athlete_rm', to='training_area.Athlete'),
        ),
        migrations.AddField(
            model_name='microcycle',
            name='athlete',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='micro_athlete', to='training_area.Athlete'),
        ),
        migrations.AddField(
            model_name='microcycle',
            name='coach',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='micro_coach', to='training_area.Coach'),
        ),
        migrations.AddField(
            model_name='mesocycle',
            name='athlete',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='meso_athlete', to='training_area.Athlete'),
        ),
        migrations.AddField(
            model_name='mesocycle',
            name='coach',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='meso_coach', to='training_area.Coach'),
        ),
        migrations.AddField(
            model_name='macrocycle',
            name='athlete',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mac_athlete', to='training_area.Athlete'),
        ),
        migrations.AddField(
            model_name='macrocycle',
            name='coach',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mac_coach', to='training_area.Coach'),
        ),
        migrations.AddField(
            model_name='athlete',
            name='coach',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='coach', to='training_area.Coach'),
        ),
        migrations.AddField(
            model_name='athlete',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team', to='training_area.Team'),
        ),
    ]
